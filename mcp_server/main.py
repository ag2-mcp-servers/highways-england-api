# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:30:11+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    AreaResponse,
    DailyQualityResponse,
    Object,
    OverallQualityResponse,
    SiteResponse,
    SiteTypeLayer,
    SiteTypeResponse,
)

app = MCPProxy(
    contact={'x-twitter': 'HighwaysEngland'},
    title='Highways England API',
    version='v1',
    servers=[{'url': 'https://webtris.highwaysengland.co.uk/api'}],
)


@app.get('/v{version}/areas', tags=['area_data_management'])
def areas__get(version: str):
    """
    Returns list of areas
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v{version}/areas/{area_Ids}', tags=['area_data_management'])
def get_v_version_areas__area__ids(
    area__ids: str = Path(..., alias='area_Ids'), version: str = ...
):
    """
    Returns details of selected area
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v{version}/quality/daily', tags=['data_quality_analysis', 'site_data_management']
)
def quality__get_daily_data_quality_for_site(
    site_id: str = Query(..., alias='siteId'),
    start_date: str = ...,
    end_date: str = ...,
    version: str = ...,
):
    """
    Get Site DailyQuality
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v{version}/quality/overall',
    tags=['data_quality_analysis', 'site_data_management'],
)
def quality__get_overall_data_quality_for_sites(
    sites: str, start_date: str = ..., end_date: str = ..., version: str = ...
):
    """
    Get Site OverallQuality
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v{version}/reports/{report_type}',
    description=""" Get's the report. """,
    tags=['report_creation', 'site_data_management'],
)
def reports__index(
    report_type: str,
    sites: str = ...,
    start_date: str = ...,
    end_date: str = ...,
    page: int = ...,
    page_size: int = ...,
    report_sub_type_id: Optional[int] = Query(None, alias='reportSubTypeId'),
    version: str = ...,
):
    """
    Gets the daily report.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v{version}/reports/{start_date}/to/{end_date}/{report_type}',
    description=""" Get's the report. """,
    tags=['report_creation', 'site_data_management'],
)
def get_v_version_reports__start_date_to__end_date__report_type(
    report_type: str,
    sites: str = ...,
    start_date: str = ...,
    end_date: str = ...,
    page: int = ...,
    page_size: int = ...,
    report_sub_type_id: Optional[int] = Query(None, alias='reportSubTypeId'),
    version: str = ...,
):
    """
    Gets the daily report.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v{version}/sites', tags=['site_data_management', 'area_data_management'])
def sites__index(version: str):
    """
    Get a list of sites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v{version}/sites/{site_Ids}', tags=['site_data_management'])
def get_v_version_sites__site__ids(
    site__ids: str = Path(..., alias='site_Ids'), version: str = ...
):
    """
    Get selected sites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v{version}/sitetypes', tags=['site_type_data_management'])
def site_types__index(version: str):
    """
    Return list of site types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v{version}/sitetypes/{siteType_Id}/sites',
    tags=['site_data_management', 'site_type_data_management'],
)
def site_types__get_sites_for_public_facing_a_p_i(
    site_type__id: int = Path(..., alias='siteType_Id'), version: str = ...
):
    """
    Returns the layer metadata for the LayerId specified.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
